// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/saved-post.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetSavedPostsResponseDto {
  savedPosts: SavedPostDto[];
}

export interface DeleteSavedPostResponseDto {
  success: boolean;
}

export interface SaveId {
  id: string;
}

export interface CreateSavedPostDto {
  userId: string;
  postId: string;
}

export interface SavedPostDto {
  id: string;
  userId: string;
  postId: string;
}

//========================================//
//     SavedPostProto Protobuf Client     //
//========================================//

export async function getSavedPosts(
  saveId: SaveId,
  config?: ClientConfiguration,
): Promise<GetSavedPostsResponseDto> {
  const response = await PBrequest(
    "/SavedPostProto/getSavedPosts",
    SaveId.encode(saveId),
    config,
  );
  return GetSavedPostsResponseDto.decode(response);
}

export async function getSavedPost(
  saveId: SaveId,
  config?: ClientConfiguration,
): Promise<SavedPostDto> {
  const response = await PBrequest(
    "/SavedPostProto/getSavedPost",
    SaveId.encode(saveId),
    config,
  );
  return SavedPostDto.decode(response);
}

export async function createSavedPost(
  createSavedPostDto: CreateSavedPostDto,
  config?: ClientConfiguration,
): Promise<SavedPostDto> {
  const response = await PBrequest(
    "/SavedPostProto/createSavedPost",
    CreateSavedPostDto.encode(createSavedPostDto),
    config,
  );
  return SavedPostDto.decode(response);
}

export async function deleteSavedPost(
  saveId: SaveId,
  config?: ClientConfiguration,
): Promise<DeleteSavedPostResponseDto> {
  const response = await PBrequest(
    "/SavedPostProto/deleteSavedPost",
    SaveId.encode(saveId),
    config,
  );
  return DeleteSavedPostResponseDto.decode(response);
}

//========================================//
//       SavedPostProto JSON Client       //
//========================================//

export async function getSavedPostsJSON(
  saveId: SaveId,
  config?: ClientConfiguration,
): Promise<GetSavedPostsResponseDto> {
  const response = await JSONrequest(
    "/SavedPostProto/getSavedPosts",
    SaveIdJSON.encode(saveId),
    config,
  );
  return GetSavedPostsResponseDtoJSON.decode(response);
}

export async function getSavedPostJSON(
  saveId: SaveId,
  config?: ClientConfiguration,
): Promise<SavedPostDto> {
  const response = await JSONrequest(
    "/SavedPostProto/getSavedPost",
    SaveIdJSON.encode(saveId),
    config,
  );
  return SavedPostDtoJSON.decode(response);
}

export async function createSavedPostJSON(
  createSavedPostDto: CreateSavedPostDto,
  config?: ClientConfiguration,
): Promise<SavedPostDto> {
  const response = await JSONrequest(
    "/SavedPostProto/createSavedPost",
    CreateSavedPostDtoJSON.encode(createSavedPostDto),
    config,
  );
  return SavedPostDtoJSON.decode(response);
}

export async function deleteSavedPostJSON(
  saveId: SaveId,
  config?: ClientConfiguration,
): Promise<DeleteSavedPostResponseDto> {
  const response = await JSONrequest(
    "/SavedPostProto/deleteSavedPost",
    SaveIdJSON.encode(saveId),
    config,
  );
  return DeleteSavedPostResponseDtoJSON.decode(response);
}

//========================================//
//             SavedPostProto             //
//========================================//

export interface SavedPostProto<Context = unknown> {
  getSavedPosts: (
    saveId: SaveId,
    context: Context,
  ) => Promise<GetSavedPostsResponseDto> | GetSavedPostsResponseDto;
  getSavedPost: (
    saveId: SaveId,
    context: Context,
  ) => Promise<SavedPostDto> | SavedPostDto;
  createSavedPost: (
    createSavedPostDto: CreateSavedPostDto,
    context: Context,
  ) => Promise<SavedPostDto> | SavedPostDto;
  deleteSavedPost: (
    saveId: SaveId,
    context: Context,
  ) => Promise<DeleteSavedPostResponseDto> | DeleteSavedPostResponseDto;
}

export function createSavedPostProto<Context>(
  service: SavedPostProto<Context>,
) {
  return {
    name: "SavedPostProto",
    methods: {
      getSavedPosts: {
        name: "getSavedPosts",
        handler: service.getSavedPosts,
        input: { protobuf: SaveId, json: SaveIdJSON },
        output: {
          protobuf: GetSavedPostsResponseDto,
          json: GetSavedPostsResponseDtoJSON,
        },
      },
      getSavedPost: {
        name: "getSavedPost",
        handler: service.getSavedPost,
        input: { protobuf: SaveId, json: SaveIdJSON },
        output: { protobuf: SavedPostDto, json: SavedPostDtoJSON },
      },
      createSavedPost: {
        name: "createSavedPost",
        handler: service.createSavedPost,
        input: { protobuf: CreateSavedPostDto, json: CreateSavedPostDtoJSON },
        output: { protobuf: SavedPostDto, json: SavedPostDtoJSON },
      },
      deleteSavedPost: {
        name: "deleteSavedPost",
        handler: service.deleteSavedPost,
        input: { protobuf: SaveId, json: SaveIdJSON },
        output: {
          protobuf: DeleteSavedPostResponseDto,
          json: DeleteSavedPostResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetSavedPostsResponseDto = {
  /**
   * Serializes GetSavedPostsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetSavedPostsResponseDto>): Uint8Array {
    return GetSavedPostsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetSavedPostsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetSavedPostsResponseDto {
    return GetSavedPostsResponseDto._readMessage(
      GetSavedPostsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetSavedPostsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetSavedPostsResponseDto>,
  ): GetSavedPostsResponseDto {
    return {
      savedPosts: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSavedPostsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.savedPosts?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.savedPosts as any,
        SavedPostDto._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSavedPostsResponseDto,
    reader: protoscript.BinaryReader,
  ): GetSavedPostsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = SavedPostDto.initialize();
          reader.readMessage(m, SavedPostDto._readMessage);
          msg.savedPosts.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteSavedPostResponseDto = {
  /**
   * Serializes DeleteSavedPostResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteSavedPostResponseDto>): Uint8Array {
    return DeleteSavedPostResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteSavedPostResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteSavedPostResponseDto {
    return DeleteSavedPostResponseDto._readMessage(
      DeleteSavedPostResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteSavedPostResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteSavedPostResponseDto>,
  ): DeleteSavedPostResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteSavedPostResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteSavedPostResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteSavedPostResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SaveId = {
  /**
   * Serializes SaveId to protobuf.
   */
  encode: function (msg: PartialDeep<SaveId>): Uint8Array {
    return SaveId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SaveId from protobuf.
   */
  decode: function (bytes: ByteSource): SaveId {
    return SaveId._readMessage(
      SaveId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SaveId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SaveId>): SaveId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SaveId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SaveId,
    reader: protoscript.BinaryReader,
  ): SaveId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateSavedPostDto = {
  /**
   * Serializes CreateSavedPostDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateSavedPostDto>): Uint8Array {
    return CreateSavedPostDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateSavedPostDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateSavedPostDto {
    return CreateSavedPostDto._readMessage(
      CreateSavedPostDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateSavedPostDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateSavedPostDto>): CreateSavedPostDto {
    return {
      userId: "",
      postId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateSavedPostDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.postId) {
      writer.writeString(2, msg.postId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateSavedPostDto,
    reader: protoscript.BinaryReader,
  ): CreateSavedPostDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.postId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SavedPostDto = {
  /**
   * Serializes SavedPostDto to protobuf.
   */
  encode: function (msg: PartialDeep<SavedPostDto>): Uint8Array {
    return SavedPostDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SavedPostDto from protobuf.
   */
  decode: function (bytes: ByteSource): SavedPostDto {
    return SavedPostDto._readMessage(
      SavedPostDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SavedPostDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SavedPostDto>): SavedPostDto {
    return {
      id: "",
      userId: "",
      postId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SavedPostDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.postId) {
      writer.writeString(3, msg.postId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SavedPostDto,
    reader: protoscript.BinaryReader,
  ): SavedPostDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.postId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetSavedPostsResponseDtoJSON = {
  /**
   * Serializes GetSavedPostsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetSavedPostsResponseDto>): string {
    return JSON.stringify(GetSavedPostsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetSavedPostsResponseDto from JSON.
   */
  decode: function (json: string): GetSavedPostsResponseDto {
    return GetSavedPostsResponseDtoJSON._readMessage(
      GetSavedPostsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetSavedPostsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetSavedPostsResponseDto>,
  ): GetSavedPostsResponseDto {
    return {
      savedPosts: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSavedPostsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.savedPosts?.length) {
      json["savedPosts"] = msg.savedPosts.map(SavedPostDtoJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSavedPostsResponseDto,
    json: any,
  ): GetSavedPostsResponseDto {
    const _savedPosts_ = json["savedPosts"];
    if (_savedPosts_) {
      for (const item of _savedPosts_) {
        const m = SavedPostDtoJSON.initialize();
        SavedPostDtoJSON._readMessage(m, item);
        msg.savedPosts.push(m);
      }
    }
    return msg;
  },
};

export const DeleteSavedPostResponseDtoJSON = {
  /**
   * Serializes DeleteSavedPostResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteSavedPostResponseDto>): string {
    return JSON.stringify(DeleteSavedPostResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteSavedPostResponseDto from JSON.
   */
  decode: function (json: string): DeleteSavedPostResponseDto {
    return DeleteSavedPostResponseDtoJSON._readMessage(
      DeleteSavedPostResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteSavedPostResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteSavedPostResponseDto>,
  ): DeleteSavedPostResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteSavedPostResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteSavedPostResponseDto,
    json: any,
  ): DeleteSavedPostResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const SaveIdJSON = {
  /**
   * Serializes SaveId to JSON.
   */
  encode: function (msg: PartialDeep<SaveId>): string {
    return JSON.stringify(SaveIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes SaveId from JSON.
   */
  decode: function (json: string): SaveId {
    return SaveIdJSON._readMessage(SaveIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes SaveId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SaveId>): SaveId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<SaveId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SaveId, json: any): SaveId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const CreateSavedPostDtoJSON = {
  /**
   * Serializes CreateSavedPostDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateSavedPostDto>): string {
    return JSON.stringify(CreateSavedPostDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateSavedPostDto from JSON.
   */
  decode: function (json: string): CreateSavedPostDto {
    return CreateSavedPostDtoJSON._readMessage(
      CreateSavedPostDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateSavedPostDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateSavedPostDto>): CreateSavedPostDto {
    return {
      userId: "",
      postId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateSavedPostDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.postId) {
      json["postId"] = msg.postId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateSavedPostDto,
    json: any,
  ): CreateSavedPostDto {
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _postId_ = json["postId"];
    if (_postId_) {
      msg.postId = _postId_;
    }
    return msg;
  },
};

export const SavedPostDtoJSON = {
  /**
   * Serializes SavedPostDto to JSON.
   */
  encode: function (msg: PartialDeep<SavedPostDto>): string {
    return JSON.stringify(SavedPostDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes SavedPostDto from JSON.
   */
  decode: function (json: string): SavedPostDto {
    return SavedPostDtoJSON._readMessage(
      SavedPostDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SavedPostDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SavedPostDto>): SavedPostDto {
    return {
      id: "",
      userId: "",
      postId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SavedPostDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.postId) {
      json["postId"] = msg.postId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SavedPostDto, json: any): SavedPostDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _postId_ = json["postId"];
    if (_postId_) {
      msg.postId = _postId_;
    }
    return msg;
  },
};
