// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/comment.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetCommentsResponseDto {
  comments: CommentDto[];
}

export interface DeleteCommentResponseDto {
  success: boolean;
}

export interface EmptyComment {}

export interface CommentId {
  id: string;
}

export interface CommentPostId {
  id: string;
}

export interface UpdateCommentDto {
  id: string;
  authorId: string;
  message: string;
  attachment: string;
  postId: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateCommentDto {
  authorId: string;
  message: string;
  attachment: string;
  postId: string;
}

export interface CommentDto {
  id: string;
  authorId: string;
  message: string;
  attachment: string;
  postId: string;
  createdAt: string;
  updatedAt: string;
}

//========================================//
//      CommentProto Protobuf Client      //
//========================================//

export async function getComments(
  emptyComment: EmptyComment,
  config?: ClientConfiguration,
): Promise<GetCommentsResponseDto> {
  const response = await PBrequest(
    "/CommentProto/getComments",
    EmptyComment.encode(emptyComment),
    config,
  );
  return GetCommentsResponseDto.decode(response);
}

export async function getCommentsForPost(
  commentPostId: CommentPostId,
  config?: ClientConfiguration,
): Promise<GetCommentsResponseDto> {
  const response = await PBrequest(
    "/CommentProto/getCommentsForPost",
    CommentPostId.encode(commentPostId),
    config,
  );
  return GetCommentsResponseDto.decode(response);
}

export async function createComment(
  createCommentDto: CreateCommentDto,
  config?: ClientConfiguration,
): Promise<CommentDto> {
  const response = await PBrequest(
    "/CommentProto/createComment",
    CreateCommentDto.encode(createCommentDto),
    config,
  );
  return CommentDto.decode(response);
}

export async function updateComment(
  updateCommentDto: UpdateCommentDto,
  config?: ClientConfiguration,
): Promise<CommentDto> {
  const response = await PBrequest(
    "/CommentProto/updateComment",
    UpdateCommentDto.encode(updateCommentDto),
    config,
  );
  return CommentDto.decode(response);
}

export async function deleteComment(
  commentId: CommentId,
  config?: ClientConfiguration,
): Promise<DeleteCommentResponseDto> {
  const response = await PBrequest(
    "/CommentProto/deleteComment",
    CommentId.encode(commentId),
    config,
  );
  return DeleteCommentResponseDto.decode(response);
}

//========================================//
//        CommentProto JSON Client        //
//========================================//

export async function getCommentsJSON(
  emptyComment: EmptyComment,
  config?: ClientConfiguration,
): Promise<GetCommentsResponseDto> {
  const response = await JSONrequest(
    "/CommentProto/getComments",
    EmptyCommentJSON.encode(emptyComment),
    config,
  );
  return GetCommentsResponseDtoJSON.decode(response);
}

export async function getCommentsForPostJSON(
  commentPostId: CommentPostId,
  config?: ClientConfiguration,
): Promise<GetCommentsResponseDto> {
  const response = await JSONrequest(
    "/CommentProto/getCommentsForPost",
    CommentPostIdJSON.encode(commentPostId),
    config,
  );
  return GetCommentsResponseDtoJSON.decode(response);
}

export async function createCommentJSON(
  createCommentDto: CreateCommentDto,
  config?: ClientConfiguration,
): Promise<CommentDto> {
  const response = await JSONrequest(
    "/CommentProto/createComment",
    CreateCommentDtoJSON.encode(createCommentDto),
    config,
  );
  return CommentDtoJSON.decode(response);
}

export async function updateCommentJSON(
  updateCommentDto: UpdateCommentDto,
  config?: ClientConfiguration,
): Promise<CommentDto> {
  const response = await JSONrequest(
    "/CommentProto/updateComment",
    UpdateCommentDtoJSON.encode(updateCommentDto),
    config,
  );
  return CommentDtoJSON.decode(response);
}

export async function deleteCommentJSON(
  commentId: CommentId,
  config?: ClientConfiguration,
): Promise<DeleteCommentResponseDto> {
  const response = await JSONrequest(
    "/CommentProto/deleteComment",
    CommentIdJSON.encode(commentId),
    config,
  );
  return DeleteCommentResponseDtoJSON.decode(response);
}

//========================================//
//              CommentProto              //
//========================================//

export interface CommentProto<Context = unknown> {
  getComments: (
    emptyComment: EmptyComment,
    context: Context,
  ) => Promise<GetCommentsResponseDto> | GetCommentsResponseDto;
  getCommentsForPost: (
    commentPostId: CommentPostId,
    context: Context,
  ) => Promise<GetCommentsResponseDto> | GetCommentsResponseDto;
  createComment: (
    createCommentDto: CreateCommentDto,
    context: Context,
  ) => Promise<CommentDto> | CommentDto;
  updateComment: (
    updateCommentDto: UpdateCommentDto,
    context: Context,
  ) => Promise<CommentDto> | CommentDto;
  deleteComment: (
    commentId: CommentId,
    context: Context,
  ) => Promise<DeleteCommentResponseDto> | DeleteCommentResponseDto;
}

export function createCommentProto<Context>(service: CommentProto<Context>) {
  return {
    name: "CommentProto",
    methods: {
      getComments: {
        name: "getComments",
        handler: service.getComments,
        input: { protobuf: EmptyComment, json: EmptyCommentJSON },
        output: {
          protobuf: GetCommentsResponseDto,
          json: GetCommentsResponseDtoJSON,
        },
      },
      getCommentsForPost: {
        name: "getCommentsForPost",
        handler: service.getCommentsForPost,
        input: { protobuf: CommentPostId, json: CommentPostIdJSON },
        output: {
          protobuf: GetCommentsResponseDto,
          json: GetCommentsResponseDtoJSON,
        },
      },
      createComment: {
        name: "createComment",
        handler: service.createComment,
        input: { protobuf: CreateCommentDto, json: CreateCommentDtoJSON },
        output: { protobuf: CommentDto, json: CommentDtoJSON },
      },
      updateComment: {
        name: "updateComment",
        handler: service.updateComment,
        input: { protobuf: UpdateCommentDto, json: UpdateCommentDtoJSON },
        output: { protobuf: CommentDto, json: CommentDtoJSON },
      },
      deleteComment: {
        name: "deleteComment",
        handler: service.deleteComment,
        input: { protobuf: CommentId, json: CommentIdJSON },
        output: {
          protobuf: DeleteCommentResponseDto,
          json: DeleteCommentResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetCommentsResponseDto = {
  /**
   * Serializes GetCommentsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetCommentsResponseDto>): Uint8Array {
    return GetCommentsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetCommentsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetCommentsResponseDto {
    return GetCommentsResponseDto._readMessage(
      GetCommentsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetCommentsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetCommentsResponseDto>,
  ): GetCommentsResponseDto {
    return {
      comments: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCommentsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.comments?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.comments as any,
        CommentDto._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCommentsResponseDto,
    reader: protoscript.BinaryReader,
  ): GetCommentsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = CommentDto.initialize();
          reader.readMessage(m, CommentDto._readMessage);
          msg.comments.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCommentResponseDto = {
  /**
   * Serializes DeleteCommentResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteCommentResponseDto>): Uint8Array {
    return DeleteCommentResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCommentResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCommentResponseDto {
    return DeleteCommentResponseDto._readMessage(
      DeleteCommentResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCommentResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCommentResponseDto>,
  ): DeleteCommentResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCommentResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCommentResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteCommentResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EmptyComment = {
  /**
   * Serializes EmptyComment to protobuf.
   */
  encode: function (_msg?: PartialDeep<EmptyComment>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EmptyComment from protobuf.
   */
  decode: function (_bytes?: ByteSource): EmptyComment {
    return {};
  },

  /**
   * Initializes EmptyComment with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EmptyComment>): EmptyComment {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EmptyComment>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EmptyComment,
    _reader: protoscript.BinaryReader,
  ): EmptyComment {
    return _msg;
  },
};

export const CommentId = {
  /**
   * Serializes CommentId to protobuf.
   */
  encode: function (msg: PartialDeep<CommentId>): Uint8Array {
    return CommentId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CommentId from protobuf.
   */
  decode: function (bytes: ByteSource): CommentId {
    return CommentId._readMessage(
      CommentId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CommentId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommentId>): CommentId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommentId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CommentId,
    reader: protoscript.BinaryReader,
  ): CommentId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CommentPostId = {
  /**
   * Serializes CommentPostId to protobuf.
   */
  encode: function (msg: PartialDeep<CommentPostId>): Uint8Array {
    return CommentPostId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CommentPostId from protobuf.
   */
  decode: function (bytes: ByteSource): CommentPostId {
    return CommentPostId._readMessage(
      CommentPostId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CommentPostId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommentPostId>): CommentPostId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommentPostId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CommentPostId,
    reader: protoscript.BinaryReader,
  ): CommentPostId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateCommentDto = {
  /**
   * Serializes UpdateCommentDto to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateCommentDto>): Uint8Array {
    return UpdateCommentDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateCommentDto from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateCommentDto {
    return UpdateCommentDto._readMessage(
      UpdateCommentDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateCommentDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateCommentDto>): UpdateCommentDto {
    return {
      id: "",
      authorId: "",
      message: "",
      attachment: "",
      postId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCommentDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.authorId) {
      writer.writeString(2, msg.authorId);
    }
    if (msg.message) {
      writer.writeString(4, msg.message);
    }
    if (msg.attachment) {
      writer.writeString(5, msg.attachment);
    }
    if (msg.postId) {
      writer.writeString(6, msg.postId);
    }
    if (msg.createdAt) {
      writer.writeString(7, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(8, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCommentDto,
    reader: protoscript.BinaryReader,
  ): UpdateCommentDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.authorId = reader.readString();
          break;
        }
        case 4: {
          msg.message = reader.readString();
          break;
        }
        case 5: {
          msg.attachment = reader.readString();
          break;
        }
        case 6: {
          msg.postId = reader.readString();
          break;
        }
        case 7: {
          msg.createdAt = reader.readString();
          break;
        }
        case 8: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCommentDto = {
  /**
   * Serializes CreateCommentDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateCommentDto>): Uint8Array {
    return CreateCommentDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCommentDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateCommentDto {
    return CreateCommentDto._readMessage(
      CreateCommentDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateCommentDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateCommentDto>): CreateCommentDto {
    return {
      authorId: "",
      message: "",
      attachment: "",
      postId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCommentDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.authorId) {
      writer.writeString(2, msg.authorId);
    }
    if (msg.message) {
      writer.writeString(4, msg.message);
    }
    if (msg.attachment) {
      writer.writeString(5, msg.attachment);
    }
    if (msg.postId) {
      writer.writeString(6, msg.postId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCommentDto,
    reader: protoscript.BinaryReader,
  ): CreateCommentDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 2: {
          msg.authorId = reader.readString();
          break;
        }
        case 4: {
          msg.message = reader.readString();
          break;
        }
        case 5: {
          msg.attachment = reader.readString();
          break;
        }
        case 6: {
          msg.postId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CommentDto = {
  /**
   * Serializes CommentDto to protobuf.
   */
  encode: function (msg: PartialDeep<CommentDto>): Uint8Array {
    return CommentDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CommentDto from protobuf.
   */
  decode: function (bytes: ByteSource): CommentDto {
    return CommentDto._readMessage(
      CommentDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CommentDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommentDto>): CommentDto {
    return {
      id: "",
      authorId: "",
      message: "",
      attachment: "",
      postId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommentDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.authorId) {
      writer.writeString(2, msg.authorId);
    }
    if (msg.message) {
      writer.writeString(4, msg.message);
    }
    if (msg.attachment) {
      writer.writeString(5, msg.attachment);
    }
    if (msg.postId) {
      writer.writeString(6, msg.postId);
    }
    if (msg.createdAt) {
      writer.writeString(7, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(8, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CommentDto,
    reader: protoscript.BinaryReader,
  ): CommentDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.authorId = reader.readString();
          break;
        }
        case 4: {
          msg.message = reader.readString();
          break;
        }
        case 5: {
          msg.attachment = reader.readString();
          break;
        }
        case 6: {
          msg.postId = reader.readString();
          break;
        }
        case 7: {
          msg.createdAt = reader.readString();
          break;
        }
        case 8: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetCommentsResponseDtoJSON = {
  /**
   * Serializes GetCommentsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetCommentsResponseDto>): string {
    return JSON.stringify(GetCommentsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetCommentsResponseDto from JSON.
   */
  decode: function (json: string): GetCommentsResponseDto {
    return GetCommentsResponseDtoJSON._readMessage(
      GetCommentsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetCommentsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetCommentsResponseDto>,
  ): GetCommentsResponseDto {
    return {
      comments: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCommentsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.comments?.length) {
      json["comments"] = msg.comments.map(CommentDtoJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCommentsResponseDto,
    json: any,
  ): GetCommentsResponseDto {
    const _comments_ = json["comments"];
    if (_comments_) {
      for (const item of _comments_) {
        const m = CommentDtoJSON.initialize();
        CommentDtoJSON._readMessage(m, item);
        msg.comments.push(m);
      }
    }
    return msg;
  },
};

export const DeleteCommentResponseDtoJSON = {
  /**
   * Serializes DeleteCommentResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCommentResponseDto>): string {
    return JSON.stringify(DeleteCommentResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCommentResponseDto from JSON.
   */
  decode: function (json: string): DeleteCommentResponseDto {
    return DeleteCommentResponseDtoJSON._readMessage(
      DeleteCommentResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCommentResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCommentResponseDto>,
  ): DeleteCommentResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCommentResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCommentResponseDto,
    json: any,
  ): DeleteCommentResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const EmptyCommentJSON = {
  /**
   * Serializes EmptyComment to JSON.
   */
  encode: function (_msg?: PartialDeep<EmptyComment>): string {
    return "{}";
  },

  /**
   * Deserializes EmptyComment from JSON.
   */
  decode: function (_json?: string): EmptyComment {
    return {};
  },

  /**
   * Initializes EmptyComment with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EmptyComment>): EmptyComment {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EmptyComment>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EmptyComment, _json: any): EmptyComment {
    return msg;
  },
};

export const CommentIdJSON = {
  /**
   * Serializes CommentId to JSON.
   */
  encode: function (msg: PartialDeep<CommentId>): string {
    return JSON.stringify(CommentIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes CommentId from JSON.
   */
  decode: function (json: string): CommentId {
    return CommentIdJSON._readMessage(
      CommentIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CommentId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommentId>): CommentId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommentId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CommentId, json: any): CommentId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const CommentPostIdJSON = {
  /**
   * Serializes CommentPostId to JSON.
   */
  encode: function (msg: PartialDeep<CommentPostId>): string {
    return JSON.stringify(CommentPostIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes CommentPostId from JSON.
   */
  decode: function (json: string): CommentPostId {
    return CommentPostIdJSON._readMessage(
      CommentPostIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CommentPostId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommentPostId>): CommentPostId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommentPostId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CommentPostId, json: any): CommentPostId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateCommentDtoJSON = {
  /**
   * Serializes UpdateCommentDto to JSON.
   */
  encode: function (msg: PartialDeep<UpdateCommentDto>): string {
    return JSON.stringify(UpdateCommentDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateCommentDto from JSON.
   */
  decode: function (json: string): UpdateCommentDto {
    return UpdateCommentDtoJSON._readMessage(
      UpdateCommentDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateCommentDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateCommentDto>): UpdateCommentDto {
    return {
      id: "",
      authorId: "",
      message: "",
      attachment: "",
      postId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCommentDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.authorId) {
      json["authorId"] = msg.authorId;
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    if (msg.attachment) {
      json["attachment"] = msg.attachment;
    }
    if (msg.postId) {
      json["postId"] = msg.postId;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UpdateCommentDto, json: any): UpdateCommentDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _authorId_ = json["authorId"];
    if (_authorId_) {
      msg.authorId = _authorId_;
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    const _attachment_ = json["attachment"];
    if (_attachment_) {
      msg.attachment = _attachment_;
    }
    const _postId_ = json["postId"];
    if (_postId_) {
      msg.postId = _postId_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};

export const CreateCommentDtoJSON = {
  /**
   * Serializes CreateCommentDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateCommentDto>): string {
    return JSON.stringify(CreateCommentDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCommentDto from JSON.
   */
  decode: function (json: string): CreateCommentDto {
    return CreateCommentDtoJSON._readMessage(
      CreateCommentDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateCommentDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateCommentDto>): CreateCommentDto {
    return {
      authorId: "",
      message: "",
      attachment: "",
      postId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCommentDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.authorId) {
      json["authorId"] = msg.authorId;
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    if (msg.attachment) {
      json["attachment"] = msg.attachment;
    }
    if (msg.postId) {
      json["postId"] = msg.postId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CreateCommentDto, json: any): CreateCommentDto {
    const _authorId_ = json["authorId"];
    if (_authorId_) {
      msg.authorId = _authorId_;
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    const _attachment_ = json["attachment"];
    if (_attachment_) {
      msg.attachment = _attachment_;
    }
    const _postId_ = json["postId"];
    if (_postId_) {
      msg.postId = _postId_;
    }
    return msg;
  },
};

export const CommentDtoJSON = {
  /**
   * Serializes CommentDto to JSON.
   */
  encode: function (msg: PartialDeep<CommentDto>): string {
    return JSON.stringify(CommentDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CommentDto from JSON.
   */
  decode: function (json: string): CommentDto {
    return CommentDtoJSON._readMessage(
      CommentDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CommentDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CommentDto>): CommentDto {
    return {
      id: "",
      authorId: "",
      message: "",
      attachment: "",
      postId: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CommentDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.authorId) {
      json["authorId"] = msg.authorId;
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    if (msg.attachment) {
      json["attachment"] = msg.attachment;
    }
    if (msg.postId) {
      json["postId"] = msg.postId;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CommentDto, json: any): CommentDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _authorId_ = json["authorId"];
    if (_authorId_) {
      msg.authorId = _authorId_;
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    const _attachment_ = json["attachment"];
    if (_attachment_) {
      msg.attachment = _attachment_;
    }
    const _postId_ = json["postId"];
    if (_postId_) {
      msg.postId = _postId_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};
