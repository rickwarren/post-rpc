// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/notification.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetNotificationsResponseDto {
  notifications: NotificationDto[];
}

export interface UserId {
  id: string;
}

export interface NotificationId {
  id: string;
}

export interface UpdateNotificationDto {
  id: string;
  userId: string;
  initiatorId: string;
  notificationType: string;
  label: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateNotificationDto {
  userId: string;
  initiatorId: string;
  notificationType: string;
  label: string;
  status: string;
}

export interface NotificationDto {
  id: string;
  userId: string;
  initiatorId: string;
  notificationType: string;
  label: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

//========================================//
//   NotificationProto Protobuf Client    //
//========================================//

export async function getNotifications(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetNotificationsResponseDto> {
  const response = await PBrequest(
    "/NotificationProto/getNotifications",
    UserId.encode(userId),
    config,
  );
  return GetNotificationsResponseDto.decode(response);
}

export async function getNotification(
  notificationId: NotificationId,
  config?: ClientConfiguration,
): Promise<NotificationDto> {
  const response = await PBrequest(
    "/NotificationProto/getNotification",
    NotificationId.encode(notificationId),
    config,
  );
  return NotificationDto.decode(response);
}

export async function createNotification(
  createNotificationDto: CreateNotificationDto,
  config?: ClientConfiguration,
): Promise<NotificationDto> {
  const response = await PBrequest(
    "/NotificationProto/createNotification",
    CreateNotificationDto.encode(createNotificationDto),
    config,
  );
  return NotificationDto.decode(response);
}

export async function updateNotification(
  updateNotificationDto: UpdateNotificationDto,
  config?: ClientConfiguration,
): Promise<NotificationDto> {
  const response = await PBrequest(
    "/NotificationProto/updateNotification",
    UpdateNotificationDto.encode(updateNotificationDto),
    config,
  );
  return NotificationDto.decode(response);
}

//========================================//
//     NotificationProto JSON Client      //
//========================================//

export async function getNotificationsJSON(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<GetNotificationsResponseDto> {
  const response = await JSONrequest(
    "/NotificationProto/getNotifications",
    UserIdJSON.encode(userId),
    config,
  );
  return GetNotificationsResponseDtoJSON.decode(response);
}

export async function getNotificationJSON(
  notificationId: NotificationId,
  config?: ClientConfiguration,
): Promise<NotificationDto> {
  const response = await JSONrequest(
    "/NotificationProto/getNotification",
    NotificationIdJSON.encode(notificationId),
    config,
  );
  return NotificationDtoJSON.decode(response);
}

export async function createNotificationJSON(
  createNotificationDto: CreateNotificationDto,
  config?: ClientConfiguration,
): Promise<NotificationDto> {
  const response = await JSONrequest(
    "/NotificationProto/createNotification",
    CreateNotificationDtoJSON.encode(createNotificationDto),
    config,
  );
  return NotificationDtoJSON.decode(response);
}

export async function updateNotificationJSON(
  updateNotificationDto: UpdateNotificationDto,
  config?: ClientConfiguration,
): Promise<NotificationDto> {
  const response = await JSONrequest(
    "/NotificationProto/updateNotification",
    UpdateNotificationDtoJSON.encode(updateNotificationDto),
    config,
  );
  return NotificationDtoJSON.decode(response);
}

//========================================//
//           NotificationProto            //
//========================================//

export interface NotificationProto<Context = unknown> {
  getNotifications: (
    userId: UserId,
    context: Context,
  ) => Promise<GetNotificationsResponseDto> | GetNotificationsResponseDto;
  getNotification: (
    notificationId: NotificationId,
    context: Context,
  ) => Promise<NotificationDto> | NotificationDto;
  createNotification: (
    createNotificationDto: CreateNotificationDto,
    context: Context,
  ) => Promise<NotificationDto> | NotificationDto;
  updateNotification: (
    updateNotificationDto: UpdateNotificationDto,
    context: Context,
  ) => Promise<NotificationDto> | NotificationDto;
}

export function createNotificationProto<Context>(
  service: NotificationProto<Context>,
) {
  return {
    name: "NotificationProto",
    methods: {
      getNotifications: {
        name: "getNotifications",
        handler: service.getNotifications,
        input: { protobuf: UserId, json: UserIdJSON },
        output: {
          protobuf: GetNotificationsResponseDto,
          json: GetNotificationsResponseDtoJSON,
        },
      },
      getNotification: {
        name: "getNotification",
        handler: service.getNotification,
        input: { protobuf: NotificationId, json: NotificationIdJSON },
        output: { protobuf: NotificationDto, json: NotificationDtoJSON },
      },
      createNotification: {
        name: "createNotification",
        handler: service.createNotification,
        input: {
          protobuf: CreateNotificationDto,
          json: CreateNotificationDtoJSON,
        },
        output: { protobuf: NotificationDto, json: NotificationDtoJSON },
      },
      updateNotification: {
        name: "updateNotification",
        handler: service.updateNotification,
        input: {
          protobuf: UpdateNotificationDto,
          json: UpdateNotificationDtoJSON,
        },
        output: { protobuf: NotificationDto, json: NotificationDtoJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetNotificationsResponseDto = {
  /**
   * Serializes GetNotificationsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetNotificationsResponseDto>): Uint8Array {
    return GetNotificationsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetNotificationsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetNotificationsResponseDto {
    return GetNotificationsResponseDto._readMessage(
      GetNotificationsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetNotificationsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetNotificationsResponseDto>,
  ): GetNotificationsResponseDto {
    return {
      notifications: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetNotificationsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.notifications?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.notifications as any,
        NotificationDto._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetNotificationsResponseDto,
    reader: protoscript.BinaryReader,
  ): GetNotificationsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = NotificationDto.initialize();
          reader.readMessage(m, NotificationDto._readMessage);
          msg.notifications.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserId = {
  /**
   * Serializes UserId to protobuf.
   */
  encode: function (msg: PartialDeep<UserId>): Uint8Array {
    return UserId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserId from protobuf.
   */
  decode: function (bytes: ByteSource): UserId {
    return UserId._readMessage(
      UserId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserId,
    reader: protoscript.BinaryReader,
  ): UserId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NotificationId = {
  /**
   * Serializes NotificationId to protobuf.
   */
  encode: function (msg: PartialDeep<NotificationId>): Uint8Array {
    return NotificationId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes NotificationId from protobuf.
   */
  decode: function (bytes: ByteSource): NotificationId {
    return NotificationId._readMessage(
      NotificationId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes NotificationId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<NotificationId>): NotificationId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NotificationId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NotificationId,
    reader: protoscript.BinaryReader,
  ): NotificationId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateNotificationDto = {
  /**
   * Serializes UpdateNotificationDto to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateNotificationDto>): Uint8Array {
    return UpdateNotificationDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateNotificationDto from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateNotificationDto {
    return UpdateNotificationDto._readMessage(
      UpdateNotificationDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateNotificationDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateNotificationDto>,
  ): UpdateNotificationDto {
    return {
      id: "",
      userId: "",
      initiatorId: "",
      notificationType: "",
      label: "",
      status: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateNotificationDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.initiatorId) {
      writer.writeString(3, msg.initiatorId);
    }
    if (msg.notificationType) {
      writer.writeString(4, msg.notificationType);
    }
    if (msg.label) {
      writer.writeString(5, msg.label);
    }
    if (msg.status) {
      writer.writeString(6, msg.status);
    }
    if (msg.createdAt) {
      writer.writeString(7, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(8, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateNotificationDto,
    reader: protoscript.BinaryReader,
  ): UpdateNotificationDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.initiatorId = reader.readString();
          break;
        }
        case 4: {
          msg.notificationType = reader.readString();
          break;
        }
        case 5: {
          msg.label = reader.readString();
          break;
        }
        case 6: {
          msg.status = reader.readString();
          break;
        }
        case 7: {
          msg.createdAt = reader.readString();
          break;
        }
        case 8: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateNotificationDto = {
  /**
   * Serializes CreateNotificationDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateNotificationDto>): Uint8Array {
    return CreateNotificationDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateNotificationDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateNotificationDto {
    return CreateNotificationDto._readMessage(
      CreateNotificationDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateNotificationDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateNotificationDto>,
  ): CreateNotificationDto {
    return {
      userId: "",
      initiatorId: "",
      notificationType: "",
      label: "",
      status: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateNotificationDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.initiatorId) {
      writer.writeString(2, msg.initiatorId);
    }
    if (msg.notificationType) {
      writer.writeString(3, msg.notificationType);
    }
    if (msg.label) {
      writer.writeString(4, msg.label);
    }
    if (msg.status) {
      writer.writeString(5, msg.status);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateNotificationDto,
    reader: protoscript.BinaryReader,
  ): CreateNotificationDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.initiatorId = reader.readString();
          break;
        }
        case 3: {
          msg.notificationType = reader.readString();
          break;
        }
        case 4: {
          msg.label = reader.readString();
          break;
        }
        case 5: {
          msg.status = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NotificationDto = {
  /**
   * Serializes NotificationDto to protobuf.
   */
  encode: function (msg: PartialDeep<NotificationDto>): Uint8Array {
    return NotificationDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes NotificationDto from protobuf.
   */
  decode: function (bytes: ByteSource): NotificationDto {
    return NotificationDto._readMessage(
      NotificationDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes NotificationDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<NotificationDto>): NotificationDto {
    return {
      id: "",
      userId: "",
      initiatorId: "",
      notificationType: "",
      label: "",
      status: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NotificationDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.initiatorId) {
      writer.writeString(3, msg.initiatorId);
    }
    if (msg.notificationType) {
      writer.writeString(4, msg.notificationType);
    }
    if (msg.label) {
      writer.writeString(5, msg.label);
    }
    if (msg.status) {
      writer.writeString(6, msg.status);
    }
    if (msg.createdAt) {
      writer.writeString(7, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(8, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NotificationDto,
    reader: protoscript.BinaryReader,
  ): NotificationDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.initiatorId = reader.readString();
          break;
        }
        case 4: {
          msg.notificationType = reader.readString();
          break;
        }
        case 5: {
          msg.label = reader.readString();
          break;
        }
        case 6: {
          msg.status = reader.readString();
          break;
        }
        case 7: {
          msg.createdAt = reader.readString();
          break;
        }
        case 8: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetNotificationsResponseDtoJSON = {
  /**
   * Serializes GetNotificationsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetNotificationsResponseDto>): string {
    return JSON.stringify(GetNotificationsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetNotificationsResponseDto from JSON.
   */
  decode: function (json: string): GetNotificationsResponseDto {
    return GetNotificationsResponseDtoJSON._readMessage(
      GetNotificationsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetNotificationsResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetNotificationsResponseDto>,
  ): GetNotificationsResponseDto {
    return {
      notifications: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetNotificationsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.notifications?.length) {
      json["notifications"] = msg.notifications.map(
        NotificationDtoJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetNotificationsResponseDto,
    json: any,
  ): GetNotificationsResponseDto {
    const _notifications_ = json["notifications"];
    if (_notifications_) {
      for (const item of _notifications_) {
        const m = NotificationDtoJSON.initialize();
        NotificationDtoJSON._readMessage(m, item);
        msg.notifications.push(m);
      }
    }
    return msg;
  },
};

export const UserIdJSON = {
  /**
   * Serializes UserId to JSON.
   */
  encode: function (msg: PartialDeep<UserId>): string {
    return JSON.stringify(UserIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserId from JSON.
   */
  decode: function (json: string): UserId {
    return UserIdJSON._readMessage(UserIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<UserId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserId, json: any): UserId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const NotificationIdJSON = {
  /**
   * Serializes NotificationId to JSON.
   */
  encode: function (msg: PartialDeep<NotificationId>): string {
    return JSON.stringify(NotificationIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes NotificationId from JSON.
   */
  decode: function (json: string): NotificationId {
    return NotificationIdJSON._readMessage(
      NotificationIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes NotificationId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<NotificationId>): NotificationId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NotificationId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: NotificationId, json: any): NotificationId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateNotificationDtoJSON = {
  /**
   * Serializes UpdateNotificationDto to JSON.
   */
  encode: function (msg: PartialDeep<UpdateNotificationDto>): string {
    return JSON.stringify(UpdateNotificationDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateNotificationDto from JSON.
   */
  decode: function (json: string): UpdateNotificationDto {
    return UpdateNotificationDtoJSON._readMessage(
      UpdateNotificationDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateNotificationDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateNotificationDto>,
  ): UpdateNotificationDto {
    return {
      id: "",
      userId: "",
      initiatorId: "",
      notificationType: "",
      label: "",
      status: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateNotificationDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.initiatorId) {
      json["initiatorId"] = msg.initiatorId;
    }
    if (msg.notificationType) {
      json["notificationType"] = msg.notificationType;
    }
    if (msg.label) {
      json["label"] = msg.label;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateNotificationDto,
    json: any,
  ): UpdateNotificationDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _initiatorId_ = json["initiatorId"];
    if (_initiatorId_) {
      msg.initiatorId = _initiatorId_;
    }
    const _notificationType_ = json["notificationType"];
    if (_notificationType_) {
      msg.notificationType = _notificationType_;
    }
    const _label_ = json["label"];
    if (_label_) {
      msg.label = _label_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};

export const CreateNotificationDtoJSON = {
  /**
   * Serializes CreateNotificationDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateNotificationDto>): string {
    return JSON.stringify(CreateNotificationDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateNotificationDto from JSON.
   */
  decode: function (json: string): CreateNotificationDto {
    return CreateNotificationDtoJSON._readMessage(
      CreateNotificationDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateNotificationDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateNotificationDto>,
  ): CreateNotificationDto {
    return {
      userId: "",
      initiatorId: "",
      notificationType: "",
      label: "",
      status: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateNotificationDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.initiatorId) {
      json["initiatorId"] = msg.initiatorId;
    }
    if (msg.notificationType) {
      json["notificationType"] = msg.notificationType;
    }
    if (msg.label) {
      json["label"] = msg.label;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateNotificationDto,
    json: any,
  ): CreateNotificationDto {
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _initiatorId_ = json["initiatorId"];
    if (_initiatorId_) {
      msg.initiatorId = _initiatorId_;
    }
    const _notificationType_ = json["notificationType"];
    if (_notificationType_) {
      msg.notificationType = _notificationType_;
    }
    const _label_ = json["label"];
    if (_label_) {
      msg.label = _label_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    return msg;
  },
};

export const NotificationDtoJSON = {
  /**
   * Serializes NotificationDto to JSON.
   */
  encode: function (msg: PartialDeep<NotificationDto>): string {
    return JSON.stringify(NotificationDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes NotificationDto from JSON.
   */
  decode: function (json: string): NotificationDto {
    return NotificationDtoJSON._readMessage(
      NotificationDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes NotificationDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<NotificationDto>): NotificationDto {
    return {
      id: "",
      userId: "",
      initiatorId: "",
      notificationType: "",
      label: "",
      status: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NotificationDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.initiatorId) {
      json["initiatorId"] = msg.initiatorId;
    }
    if (msg.notificationType) {
      json["notificationType"] = msg.notificationType;
    }
    if (msg.label) {
      json["label"] = msg.label;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: NotificationDto, json: any): NotificationDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _initiatorId_ = json["initiatorId"];
    if (_initiatorId_) {
      msg.initiatorId = _initiatorId_;
    }
    const _notificationType_ = json["notificationType"];
    if (_notificationType_) {
      msg.notificationType = _notificationType_;
    }
    const _label_ = json["label"];
    if (_label_) {
      msg.label = _label_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};
